version: '3.5'

services:
    nginx-proxy-reverse:
        image: nginx:stable-alpine
        hostname: master-proxy-reverse
        container_name: master-proxy-reverse
        restart: always
        ports:
          - "80:80"
        networks:
          - fiware_net
        volumes:
          - type: bind
            source: ./nginx-reverse/
            target: /etc/nginx/conf.d/
    
    
    simple-dash:
        container_name: simple-dash
        build:
          context: simple-dash
          dockerfile: Dockerfile
        volumes:
          - type: bind
            source: ./simple-dash
            target: /usr/src/frontend
          - type: volume
            source: vol_node_modules
            target: /usr/src/frontend/node_modules
        ports:
          - "2400:2400"
        networks:
          - fiware_net
            
  # Orion Context Broker
    orion:
        image: fiware/orion
        hostname: orion
        container_name: fiware-orion
        depends_on:
            - mongo-db
        networks:
            - fiware_net
        ports:
            - "1026:1026"
        command: -dbhost mongo-db -logLevel DEBUG -noCache
        healthcheck:
            test: curl --fail -s http://orion:1026/version || exit 1
  
  # Angente IOT intermediario entre Orion y Dispositivo IOT 
    iot-agent:
        image: fiware/iotagent-ul:latest
        hostname: iot-agent
        container_name: fiware-iot-agent
        depends_on:
            - mongo-db
        ports:
            - "4041:4041"
            - "7896:7896"
        environment:
            - IOTA_CB_HOST=orion
            - IOTA_CB_PORT=1026
            - IOTA_NORTH_PORT=4041
            - IOTA_REGISTRY_TYPE=mongodb
            - IOTA_LOG_LEVEL=DEBUG
            - IOTA_TIMESTAMP=true
            - IOTA_CB_NGSI_VERSION=v2
            - IOTA_AUTOCAST=true
            - IOTA_MONGO_HOST=mongo-db
            - IOTA_MONGO_PORT=27017
            - IOTA_MONGO_DB=iotagentul
            - IOTA_HTTP_PORT=7896
            - IOTA_PROVIDER_URL=http://iot-agent:4041
        networks: 
            - fiware_net

  # Monitorizacion utilizando Grafana
    grafana:
        image: grafana/grafana:master
        container_name: grafana
        depends_on:
            - crate-db
        ports:
            - "3000:3000"
        environment:
            # - GF_INSTALL_PLUGINS=https://github.com/raintank/crate-datasource/archive/master.zip;crate-datasource,grafana-clock-panel,grafana-worldmap-panel
            #- GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-worldmap-panel
            - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/archive/master.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel
            - GF_AUTH_ANONYMOUS_ENABLED=true
            - GF_SECURITY_ALLOW_EMBEDDING=true
            - GF_SERVER_DOMAIN=localhost
            - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/intro-fiware/grafana/
        networks:
            - fiware_net
        volumes:
            - type: volume
              source: vol_grafana-conf
              target: /var/lib/grafana

  # Quantum Leap is persisting Short Term History to Crate-DB
    quantumleap:
        image: smartsdk/quantumleap:0.7.5
        container_name: fiware-quantumleap
        ports:
            - "8668:8668"
        networks:
            - fiware_net
        depends_on:
            - crate-db
            - orion
            - mongo-db
        environment:
            - "CRATE_HOST=http://crate-db"
        healthcheck:
            test: curl --fail -s http://localhost:8668/v2/version || exit 1
  
  
  # CYGNUS SERVICE - MONGO DB PERSISTING CONTEXT    
    cygnus:
        image: fiware/cygnus-ngsi:latest
        hostname: cygnus
        container_name: fiware-cygnus
        depends_on:
            - mongo-db
        networks:
            - fiware_net
        expose:
            - "5080"
        ports:
            - "5051:5051"
            - "5080:5080"
        environment:
            - "CYGNUS_MONGO_HOSTS=mongo-db:27017"
            - "CYGNUS_MONGO_SERVICE_PORT=5051"
            - "CYGNUS_LOG_LEVEL=DEBUG"
            - "CYGNUS_API_PORT=5080"
            - "CYGNUS_SERVICE_PORT=5051"
  
  # DATABASES
  # MONGO DB solo para servicio de Orion
    mongo-db:
        image: mongo:3.6
        hostname: mongo-db
        container_name: db-mongo
        ports:
            - "27017:27017"
        command: --bind_ip_all --smallfiles
        networks:
            - fiware_net
        volumes:
            - type: volume
              source: vol_mongo-db
              target: /data
    
  # Crate para utilizar Grafana  
    crate-db:
        image: crate:3.3.2
        hostname: crate-db
        container_name: db-crate
        ports:
      # Admin UI
            - "4200:4200"
      # Transport protocol
            - "4300:4300"
   # command: crate -Clicense.enterprise=false -Cauth.host_based.enabled=false  -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
        networks:
            - fiware_net
        command: -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*"
        volumes:
            - type: volume
              source: vol_crate-db
              target: /data

# Redes
networks:
    fiware_net:

# Volumenes para persistir la data.
volumes:
    vol_mongo-db:
    vol_node_modules:
    vol_crate-db:
    vol_grafana-conf:
